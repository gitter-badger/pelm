* PELM-misc
** Date format & function to insert date or time
#+BEGIN_SRC emacs-lisp
(defun pelm/insert-date ()
  (interactive)
  (insert (format-time-string "%Y-%m-%d %A")))

(defun pelm/insert-time ()
  (interactive)
  (insert (format-time-string "%X")))

(evil-leader/set-key
  "xid" 'pelm/insert-date
  "xit" 'pelm/insert-time)

(setq display-time-day-and-date t
      display-time-24hr-format t)
(setq system-time-locale "C")
(display-time )
#+END_SRC
** Start work & end work, right now, just push or pull few repo.
#+BEGIN_SRC emacs-lisp

(defun pelm/start-work()
  "pull all repos before start work "
  (interactive)
  (pelm-clock-in-task-by-id "4233C029-C856-422C-A0F6-8E6EF2E40698")
  ;;(org-mobile-pull)
  (async-shell-command  "~/.zsh-it/bin/c.sw"))

(defun pelm/end-work()
  "push all repos before end of work"
  (interactive)
  (org-save-all-org-buffers)
  (pelm-clock-in-task-by-id "E84E9FE4-7BFF-41CD-A88A-B167DB8EA065")
  ;;(org-mobile-push)
  (async-shell-command "~/.zsh-it/bin/c.gh"))

  (evil-leader/set-key
      "ps" 'pelm/start-work
      "pe" 'pelm/end-work)

#+END_SRC
** Jabber account
#+BEGIN_SRC emacs-lisp

(require 'jabber)
(setq jabber-account-list
      '(
        ("eggcaker@gmail.com"
         (:connection-type . ssl)
         (:network-server . "talk.google.com")
         (:port . 5223))))

#+END_SRC
** Custome set variables

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(auto-save-list-file-prefix "~/.emacs.d/.cache/auto-save-list/.saves-")
  '(jabber-auto-reconnect nil)
  '(jabber-avatar-verbose nil)
  '(jabber-vcard-avatars-retrieve nil)
  '(jabber-chat-buffer-format "*-jabber-%n-*")
  '(jabber-history-enabled t)
  '(jabber-mode-line-mode t)
  '(jabber-roster-buffer "*-jabber-*")
  '(jabber-roster-line-format " %c %-25n %u %-8s (%r)")
  '(jabber-show-offline-contacts nil))

#+END_SRC
** 2048 Game

#+BEGIN_SRC emacs-lisp
(eval-after-load "2048-game"
   '(progn
  (define-key 2048-mode-map (kbd "k") '2048-up)
  (define-key 2048-mode-map (kbd "j") '2048-down)
  (define-key 2048-mode-map (kbd "h") '2048-left)
  (define-key 2048-mode-map (kbd "l") '2048-right)))

#+END_SRC
** Emacs Server

only started when running on GUI emacs

#+BEGIN_SRC emacs-lisp
(require 'server)
(if window-system
    (unless (server-running-p)
      (server-start)))

#+END_SRC
** TODO Waketime not works
#+BEGIN_SRC emacs-lisp
;;(require 'wakatime-mode)
;;(global-wakatime-mode)
#+END_SRC
