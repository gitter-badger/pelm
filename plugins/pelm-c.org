* PELM-c configurations

#+BEGIN_SRC emacs-lisp

(defconst pelm-c-style
  '((c-offsets-alist . ((substatement-open . 0)
			(defun-block-intro . 2)
			(statement-block-intro . 2)
			(case-label . 2)
			;;(inclass . 0)
            ;;(topmost-intro . 0)
			(inher-cont . 2)
			(inline-open . 2)))
    (c-echo-syntactic-information-p . t)))

(defun pelm-c-mode-common-hook ()
  (c-add-style "pelm-c" pelm-c-style t)
  (setq tab-width 2 indent-tabs-mode nil)) ;; indent with spaces not tabs

(add-hook 'c-mode-common-hook  'pelm-c-mode-common-hook)


(setq c-mode-hook
      (function (lambda()
		  (setq indent-tabs-mode nil)
		  (setq c-indent-level 2))))
(setq objc-mode-hook
      (function (lambda ()
		  (setq indent-tabs-mode nil)
		  (setq c-indent-level 2))))
(setq c++-mode-hook
      (function (lambda ()
		  (setq indent-tabs-mode nil)
		  (setq c-indent-level 2))))

(setq nxml-mode-hook
      (function (lambda ()
		  (setq indent-tabs-mode nil)
		  (setq c-indent-level 2))))

(setq tab-width 2)

(add-hook 'first-change-hook
          (lambda () (setq indent-tabs-mode nil)))

(defun run-current-file ()
 "Runs the compilation of the current file.
  Assumes it has the same name, but without an extension"
 (interactive)
 (compile (file-name-sans-extension buffer-file-name)))


(require 'compile)
(add-hook 'c-mode-hook
	   (lambda ()
	     (unless (file-exists-p "Makefile")
	       (set (make-local-variable 'compile-command)
		    ;; emulate make's .c.o implicit pattern rule, but with
		    ;; different defaults for the CC, CPPFLAGS, and CFLAGS
		    ;; variables:
		    ;; $(CC) -c -o $@ $(CPPFLAGS) $(CFLAGS) $<
		    (let ((file (file-name-nondirectory buffer-file-name)))
		      (format "%s -c -o %s.o %s %s %s"
			      (or (getenv "CC") "gcc")
			      (file-name-sans-extension file)
			      (or (getenv "CPPFLAGS") "-DDEBUG=9")
			      (or (getenv "CFLAGS") "-ansi -pedantic -Wall -g")
			      file))))))

#+END_SRC

