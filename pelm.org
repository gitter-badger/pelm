#+STARTUP:    align fold nodlcheck hidestars oddeven lognotestate
#+FILETAGS:   PELM - the P[ersonal|ublic] Emacs Lisp Manager
#+SEQ_TODO:   TODO(t) NEXT(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:       Write(w) Update(u) Fix(f) Check(c)
#+TITLE:      PELM
#+AUTHOR:     eggcaker
#+EMAIL:      eggcaker AT gmail DOT com
#+LANGUAGE:   en
#+PRIORITIES: A C B
#+CATEGORY:   PELM
#+OPTIONS:    H:3 num:nil toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:t skip:nil d:(HIDE) tags:not-in-toc

* PELM

PELM - a "literate" Emacs Lisp Manager for Emacs (24.0 and greater).

What's the P means? the P can be one of Personal or Public (if you like it)
I hope every body like it. Any fork is welcome!

** Install

1. clone source code from github to .emacs.d
#+BEGIN_SRC sh
$ cd ~
$ git clone http://github.com/eggckaer/pelm.git .emacs.d
$ cd .emacs.d
$ git submodule init
$ git submodule update
#+END_SRC
2. install dependencies with [[https://github.com/cask/cask][Cask]]
#+BEGIN_SRC sh
cd ~/.emacs.d
cask install
#+END_SRC
3. there is no step 3 !
** Predefined

Turn off early to avoid momentary display

#+BEGIN_SRC emacs-lisp
(mapc
  (lambda (mode)
    (if (fboundp mode)
      (funcall mode -1)))
   '(menu-bar-mode tool-bar-mode scroll-bar-mode))
#+END_SRC
** Define the PELM directories
- The root dir of the PELM distribution
  #+BEGIN_SRC emacs-lisp
  (defvar pelm-dir (file-name-directory load-file-name))
  #+END_SRC
- The plugins dir of the PELM
  #+BEGIN_SRC emacs-lisp
  (defconst pelm-plugins-dir (concat pelm-dir "plugins/"))
  #+END_SRC
- The vendor directory of the PELM
  #+BEGIN_SRC emacs-lisp
  (defconst pelm-vendor-dir (concat pelm-dir "vendor/"))
  #+END_SRC
- The cache directory of the PELM
  #+BEGIN_SRC emacs-lisp
  (defconst pelm-cache-dir (concat pelm-dir "cache/"))
  #+END_SRC
- The theme directory of PELM
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path (concat pelm-dir "themes/"))
  #+END_SRC
** Added PELM's directoies to load path
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path pelm-plugins-dir)
(add-to-list 'load-path pelm-vendor-dir)
#+END_SRC
** PELM hooks
#+BEGIN_SRC  emacs-lisp
(defvar pelm-pre-init-hook nil)
(defvar pelm-post-init-hook nil)
#+END_SRC
** Dependencies packages
#+BEGIN_SRC emacs-lisp
(require 'pallet)
(require 's)
(require 'dash)
(require 'f)
(require 'git)
(require 'ert)
(require 'misc)
#+END_SRC
** Run the pre-init-hook
#+BEGIN_SRC  emacs-lisp
(load (concat pelm-dir "pre-init-local") 'noerror)
(run-hooks 'pelm-pre-init-hook)
#+END_SRC
** PELM plugins

Function for loading other parts of the PELM.

#+NAME: pelm-load
#+BEGIN_SRC emacs-lisp
(defun pelm-load (file &optional header-or-tag)
  "Load configuration from other pelm-*.org files.
   If the optional argument is the id of a subtree then only
   configuration from within that subtree will be loaded.  If it is
   not an id then it will be interpreted as a tag, and only subtrees
   marked with the given tag will be loaded.

   For example, to load all of pelm-lisp.org simply
   add (pelm-load \"lisp\") to your configuration.

   To load only the 'window-system' config from
   pelm-misc-recommended.org add
   (pelm-load \"misc-recommended\" \"window-system\")
   to your configuration."
  (let ((file (expand-file-name (if (string-match "pelm-.+\.org" file)
                                    file
                                  (format "pelm-%s.org" file))
                                pelm-plugins-dir)))
    (org-babel-load-file
     (if header-or-tag
         (let* ((base (file-name-nondirectory file))
                (dir  (file-name-directory file))
                (partial-file (expand-file-name
                               (concat "." (file-name-sans-extension base)
                                       ".part." header-or-tag ".org")
                               dir)))
           (unless (file-exists-p partial-file)
             (with-temp-file partial-file
               (insert
                (with-temp-buffer
                  (insert-file-contents file)
                  (save-excursion
                    (condition-case nil
                        (progn
                          (org-link-search (concat"#"header-or-tag))
                          (org-narrow-to-subtree)
                          (buffer-string))
                      (error ;; collect all entries with as tags
                       (let (body)
                         (org-map-entries
                          (lambda ()
                            (save-restriction
                              (org-narrow-to-subtree)
                              (setq body (concat body "\n" (buffer-string)))))
                          header-or-tag)
                         body))))))))
           partial-file)
       file))))
  #+END_SRC

*** Load plugins

#+BEGIN_SRC emacs-lisp
(pelm-load "runtime")
(pelm-load "editor")
(pelm-load "ui")
(pelm-load "org")
(pelm-load "evil")
(pelm-load "keys")
(pelm-load "yas")
;;markups
    ;;scala
    ;;haskell
    ;;clojure
(pelm-load "lisp")
(pelm-load "c")
    ;;go
(pelm-load "js")
    ;;java
    ;; php
    ;;objc
(pelm-load "blog")
    ;;mail
    ;;android
    ;;gnus
(pelm-load "shell")
    ;;scrum

(pelm-load "misc")
#+END_SRC
** System Specific Files
#+BEGIN_SRC  emacs-lisp
(cond
  ((string-match "apple-darwin" system-configuration)
    (pelm-load  "pelm-mac.org"))

  ((string-match "linux" system-configuration)
    (pelm-load "pelm-linux.org"))

  ((string-match "nt" system-configuration)
    (pelm-load "pelm-windows")))

#+END_SRC
** Run the PELM post hook
#+BEGIN_SRC emacs-lisp
(load (concat pelm-dir "post-init-local") 'noerror)
(run-hooks 'pelm-post-init-hook)
#+END_SRC
** Customize

after you clone the PELM, you can add your own code in the three files:
- =pre-init-local.el= called before all plugins loading
- =post-init-local.el= called after all plugins loadded
- =pelm-private.el= called at end of pelm loading

all three files are ignored by git, so you can add some experimental code and private customize.
*** Load the pelm-private.el for some prviate configurations. ex. apk token.
#+BEGIN_SRC emacs-lisp
(load (concat pelm-dir "pelm-private") 'noerror)
#+END_SRC
** Dpendencies
- libtool
- g++
- libglib2.0-dev
- libgmime-2.6-dev
- php5 ( for stock bin)
- libxapian-dev
- texinfo
** License
